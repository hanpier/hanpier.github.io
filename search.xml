<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>k-Fold交叉验证代码</title>
    <url>/2023/02/09/23-44-15/</url>
    <content><![CDATA[<h3 id="1-k-Fold交叉验证代码"><a href="#1-k-Fold交叉验证代码" class="headerlink" title="1. k-Fold交叉验证代码"></a>1. k-Fold交叉验证代码</h3><p>k-Fold交叉验证是一种在机器学习中常用的验证模型性能的方法。它将训练数据集分为k个大小相似的互不重叠的子集，每个子集验证一次，最终验证结果是k次验证结果的平均值。</p>
<p>以下是使用python实现的k-Fold交叉验证代码：</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">learning_function</span>(<span class="params">train_data</span>):</span><br><span class="line">    <span class="comment"># 模拟学习函数，实际应用中请根据实际需求实现学习函数</span></span><br><span class="line">    <span class="keyword">return</span> train_data.mean()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">model, test_data</span>):</span><br><span class="line">    <span class="comment"># 模拟评估函数，实际应用中请根据实际需求实现评估函数</span></span><br><span class="line">    <span class="keyword">return</span> (model - test_data.mean()) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KFoldCV</span>(<span class="params">D, A, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    k-fold 交叉验证</span></span><br><span class="line"><span class="string">    参数说明：</span></span><br><span class="line"><span class="string">    D：给定数据集</span></span><br><span class="line"><span class="string">    A：学习函数</span></span><br><span class="line"><span class="string">    k：折数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(D)</span><br><span class="line">    performance = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        test_data = D[<span class="built_in">int</span>(i * n / k) : <span class="built_in">int</span>((i + <span class="number">1</span>) * n / k)]</span><br><span class="line">        train_data = np.concatenate((D[: <span class="built_in">int</span>(i * n / k)], D[<span class="built_in">int</span>((i + <span class="number">1</span>) * n / k) :]), axis=<span class="number">0</span>)</span><br><span class="line">        model = A(train_data)</span><br><span class="line">        p = evaluate(model, test_data)</span><br><span class="line">        performance.append(p)</span><br><span class="line">    <span class="keyword">return</span> np.mean(performance)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">data = np.random.rand(<span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 进行 k 折交叉验证</span></span><br><span class="line">performance = KFoldCV(data, learning_function, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均误差：&quot;</span>, performance)</span><br></pre></td></tr></table></figure>
<h3 id="2-np-concatenate函数"><a href="#2-np-concatenate函数" class="headerlink" title="2. np.concatenate函数"></a>2. np.concatenate函数</h3><p>np.concatenate是numpy库中的函数，用于将多个数组拼接起来。它的参数有两个：</p>
<ol>
<li>arrays：要拼接的数组的列表</li>
<li>axis：拼接方向，0表示按行拼接，1表示按列拼接</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">array2 = np.array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line">array3 = np.array([[<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>], [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿轴 0 连接（按行）</span></span><br><span class="line">result = np.concatenate((array1, array2, array3), axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Concatenation along axis 0: \n&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿轴 1 连接（按列）</span></span><br><span class="line">result = np.concatenate((array1, array2, array3), axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Concatenation along axis 1: \n&quot;</span>, result)</span><br></pre></td></tr></table></figure>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">沿轴<span class="number"> 0 </span>连接: </span><br><span class="line"> [[<span class="number"> 1 </span><span class="number"> 2 </span> 3]</span><br><span class="line"> [<span class="number"> 4 </span><span class="number"> 5 </span> 6]</span><br><span class="line"> [<span class="number"> 7 </span><span class="number"> 8 </span> 9]</span><br><span class="line"> [10<span class="number"> 11 </span>12]</span><br><span class="line"> [13<span class="number"> 14 </span>15]</span><br><span class="line"> [16<span class="number"> 17 </span>18]]</span><br><span class="line">沿轴<span class="number"> 1 </span>连接: </span><br><span class="line"> [[<span class="number"> 1 </span><span class="number"> 2 </span><span class="number"> 3 </span><span class="number"> 7 </span><span class="number"> 8 </span><span class="number"> 9 </span>13<span class="number"> 14 </span>15]</span><br><span class="line"> [<span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span>10<span class="number"> 11 </span>12<span class="number"> 16 </span>17 18]]</span><br></pre></td></tr></table></figure>
<h3 id="3-np-random-rand"><a href="#3-np-random-rand" class="headerlink" title="3. np.random.rand"></a>3. np.random.rand</h3><p>Numpy中提供了多种生成随机数的函数，主要包括以下几种：</p>
<ul>
<li><p>np.random.rand: 生成[0, 1)范围内的均匀分布随机数</p>
</li>
<li><p>np.random.randn: 生成标准正态分布随机数</p>
</li>
<li><p>np.random.randint: 生成给定范围内的整数随机数</p>
</li>
<li><p>np.random.choice: 从给定的一维数组中随机选取数据</p>
</li>
<li><p>np.random.permutation: 对给定的一维数组进行随机排列</p>
</li>
</ul>
<p>在使用这些函数时，通过np.random.seed(0)可以设置随机数生成的种子，使得每次生成的随机数都相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 生成 [0, 1) 之间的随机数</span></span><br><span class="line">result = np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rand: \n&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 [0, 1) 之间的均匀分布随机数</span></span><br><span class="line">result = np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rand: \n&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成正态分布的随机数</span></span><br><span class="line">result = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;randn: \n&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定区间内的随机整数</span></span><br><span class="line">result = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;randint: \n&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定形状的随机数组，并从给定的一维数组中随机选择元素</span></span><br><span class="line">array = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">result = np.random.choice(array, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;choice: \n&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定形状的随机数组，并从给定的一维数组中随机选择元素，可以重复</span></span><br><span class="line">result = np.random.choice(array, size=(<span class="number">2</span>, <span class="number">3</span>), replace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;choice with replacement: \n&quot;</span>, result)</span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">rand: </span><br><span class="line"> <span class="string">[[0.31179588 0.69634349 0.37775184]</span></span><br><span class="line"><span class="string"> [0.17960368 0.02467873 0.06724963]]</span></span><br><span class="line">rand: </span><br><span class="line"> <span class="string">[[0.67939277 0.45369684 0.53657921]</span></span><br><span class="line"><span class="string"> [0.89667129 0.99033895 0.21689698]]</span></span><br><span class="line">randn: </span><br><span class="line"> <span class="string">[[-1.22543552  0.84436298 -1.00021535]</span></span><br><span class="line"><span class="string"> [-1.5447711   1.18802979  0.31694261]]</span></span><br><span class="line">randint: </span><br><span class="line"> <span class="string">[[7 0 3]</span></span><br><span class="line"><span class="string"> [8 7 7]]</span></span><br><span class="line">choice: </span><br><span class="line"> <span class="string">[[6 3 2]</span></span><br><span class="line"><span class="string"> [1 5 1]]</span></span><br><span class="line">choice with replacement: </span><br><span class="line"> <span class="string">[[4 5 5]</span></span><br><span class="line"><span class="string"> [2 1 3]]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Jupternootbook</tag>
      </tags>
  </entry>
</search>
